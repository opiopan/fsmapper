namespace gui.Models{
    enum MapperStatus {stop = 0, running, error};
    enum Simulators {none = 0, fs2020, dcs};
    enum MessageType {error = 0, warning, info, message, debug};

    runtimeclass Device {
        Device(String cname, String dname);

        String ClassName{get;};
        String DeviceName{get;};
    }

    runtimeclass MappingsStat{
        MappingsStat();

        Int32 Primery;
        Int32 Secondary;
        Int32 Viewports;
        Int32 Views;
    }

    runtimeclass View {
        View(Int32 id, String name);

        Int32 Id{get;};
        String Name{get;};
    }

    runtimeclass Viewport {
        Viewport(String name, Object views);

        String Name{get;};
        Windows.Foundation.Collections.IVector<View> Views{get;};
    }

    runtimeclass CapturedWindow : Microsoft.UI.Xaml.Data.INotifyPropertyChanged {
        CapturedWindow(Object mapper, UInt32 cwid, String name, String description);

        UInt32 Cwid{get;};
        String Name{get;};
        String Description{get;};
        String StatusString{get;};
        Boolean IsCaptured{get;};
        Microsoft.UI.Xaml.Media.ImageSource Image{get;};
        Microsoft.UI.Xaml.Media.SolidColorBrush ButtonTitleColor{get;};
        Microsoft.UI.Xaml.Media.SolidColorBrush ButtonTextColor{get;};
        Boolean ButtonIsEnabled{get;};

        Windows.Foundation.IAsyncAction ToggleCapture(Object sender, Microsoft.UI.Xaml.RoutedEventArgs args);
        void ForceRelease();
    }

    runtimeclass Message {
        Message(MessageType type, String text);

        MessageType Type{get;};
        Microsoft.UI.Xaml.Media.SolidColorBrush TypeColor{get;};
        String TypeString{get;};
        String Text{get;};
    }

    runtimeclass Mapper: Microsoft.UI.Xaml.Data.INotifyPropertyChanged {
        Mapper();

        String ScriptPath;
        MapperStatus Status{get;};
        Simulators ActiveSim{get;};
        String AircraftName{get;};
        Boolean ViewportIsActive{get;};
        Windows.Foundation.Collections.IVector<Viewport> Viewports{get;};
        Windows.Foundation.Collections.IObservableVector<CapturedWindow> CapturedWindows{get;};
        Windows.Foundation.Collections.IVector<Device> Devices{get;};
        MappingsStat MappingsInfo{get;};
        Windows.Foundation.Collections.IObservableVector<Message> Messages{get;};
        Boolean EventMessageIsEnabled;
        Boolean DebugMessageIsEnabled;

        Microsoft.UI.Xaml.Media.ImageSource NullWindowImage{get;};

        void RunScript();
        void StopScript();
        void StopScriptSync();

        void CaptureWindow(UInt32 Cwid, UInt64 hWnd);
        void ReleaseWindow(UInt32 Cwid);
        void StartViewports();
        void StopViewports();
    }
}